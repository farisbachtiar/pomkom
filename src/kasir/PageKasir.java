/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package kasir;

import App.Koneksi;
import App.Login;
import App.UserProfile;
import java.awt.Frame;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author LENOVO
 */
public class PageKasir extends javax.swing.JFrame {

    UserProfile up;
    /**
     * Creates new form Pagekasirr
     */
    public PageKasir() {
        initComponents();
    }
    public PageKasir(UserProfile up) {
        initComponents();
        this.up = up;
        jLabel1.setText(up.getFullname());
        jLabel6.setText(up.getLevel());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        txtProduk = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        lblTotalHarga = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        lbluangKembali = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        tombolCheckout = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        txtUangBayar = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setBackground(new java.awt.Color(255, 0, 0));
        jButton1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jButton1.setForeground(new java.awt.Color(255, 255, 255));
        jButton1.setText("DEL");
        jButton1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel2.setText("Product");

        txtProduk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtProdukActionPerformed(evt);
            }
        });
        txtProduk.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtProdukKeyReleased(evt);
            }
        });

        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel4.setText("Total Harga: ");

        lblTotalHarga.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        lblTotalHarga.setForeground(new java.awt.Color(0, 0, 255));
        lblTotalHarga.setText("Rp. 0,-");

        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel5.setText("Kembali: ");

        lbluangKembali.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        lbluangKembali.setForeground(new java.awt.Color(0, 153, 51));
        lbluangKembali.setText("Rp 0,-");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblTotalHarga, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(lbluangKembali, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 111, Short.MAX_VALUE)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtProduk, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(40, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtProduk, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(31, 31, 31))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblTotalHarga, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbluangKembali, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(15, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel1, java.awt.BorderLayout.PAGE_START);

        jPanel2.setPreferredSize(new java.awt.Dimension(841, 100));

        tombolCheckout.setBackground(new java.awt.Color(0, 255, 0));
        tombolCheckout.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        tombolCheckout.setForeground(new java.awt.Color(102, 255, 0));
        tombolCheckout.setText("Checkout");
        tombolCheckout.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        tombolCheckout.setEnabled(false);
        tombolCheckout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tombolCheckoutActionPerformed(evt);
            }
        });

        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel3.setText("Uang Pembayaran: ");

        txtUangBayar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtUangBayarKeyReleased(evt);
            }
        });

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("jLabel1");

        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setText("jLabel1");

        jButton2.setText("Laporan Keuangan");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Riwayat Transaksi");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setBackground(new java.awt.Color(255, 0, 0));
        jButton4.setText("LogOut");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(93, 93, 93)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(txtUangBayar, javax.swing.GroupLayout.DEFAULT_SIZE, 175, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(tombolCheckout, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtUangBayar, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(tombolCheckout)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(7, 7, 7)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jButton2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton3))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(1, 1, 1)
                                .addComponent(jLabel6)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton4)))
                .addContainerGap())
        );

        getContentPane().add(jPanel2, java.awt.BorderLayout.PAGE_END);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "NAMA PRODUK", "QTY", "HARGA", "TOTAL"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, true, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setRowHeight(30);
        jScrollPane1.setViewportView(jTable1);

        getContentPane().add(jScrollPane1, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        delFromCart();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void txtProdukActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtProdukActionPerformed
        String val = txtProduk.getText();
        try {
            if (!val.isEmpty()) {
                int bayar = Integer.parseInt(val); // Validasi input
                String TH = jLabel5.getText();
                String[] arrTH = TH.split(" ");
                int totalH = Integer.parseInt(arrTH[1]);

                if (bayar >= totalH) {
                    long sisa = bayar - totalH;
                    lbluangKembali.setText("Rp " + sisa);
                    enableCheckoutBtn(true);
                } else {
                    lbluangKembali.setText("Rp 0");
                    enableCheckoutBtn(false);
                }
            } else {
                lbluangKembali.setText("Rp 0");
                enableCheckoutBtn(false);
            }
        } catch (NumberFormatException e) {
            lbluangKembali.setText("Rp 0");
            enableCheckoutBtn(false);
        }

        String kode = txtProduk.getText();
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();

        try (Connection K = Koneksi.Go()) {
            String query = "SELECT id, product_name, product_price_s, product_stock FROM products WHERE product_code = ?";
            PreparedStatement ps = K.prepareStatement(query);
            ps.setString(1, kode);
            ResultSet rs = ps.executeQuery();

            while (rs.next()) {
                int id = rs.getInt("id");
                String pName = rs.getString("product_name");
                double pPr = rs.getDouble("product_price_s");
                int availableStock = rs.getInt("product_stock");

                boolean exists = false;
                int rowIndex = -1;

                for (int i = 0; i < model.getRowCount(); i++) {
                    int currentId = Integer.parseInt(model.getValueAt(i, 0).toString());
                    if (currentId == id) {
                        exists = true;
                        rowIndex = i;
                        break;
                    }
                }

                if (exists) {
                    // Update kuantitas dan harga total jika stok mencukupi
                    int currentQty = Integer.parseInt(model.getValueAt(rowIndex, 2).toString());
                    int newQty = currentQty + 1;

                    if (newQty <= availableStock) {
                        model.setValueAt(newQty, rowIndex, 2); // Update kuantitas
                        model.setValueAt(newQty * pPr, rowIndex, 4); // Update total harga
                    } else {
                        JOptionPane.showMessageDialog(this, "Stok tidak mencukupi! Tersedia: " + availableStock);
                    }
                } else {
                    // Tambahkan produk baru jika stok tersedia
                    if (availableStock > 0) {
                        Object[] data = {id, pName, 1, pPr, pPr};
                        model.addRow(data);
                    } else {
                        JOptionPane.showMessageDialog(this, "Stok tidak tersedia untuk produk: " + pName);
                    }
                }
            }

            updateTotalHarga();

        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Kesalahan database: " + e.getMessage(), "Kesalahan", JOptionPane.ERROR_MESSAGE);
        }

        // Tambahkan listener untuk perubahan tabel
        model.addTableModelListener(e -> {
            int row = e.getFirstRow();
            int column = e.getColumn();

            if (column == 2 && row >= 0) {
                try {
                    int qty = Integer.parseInt(jTable1.getValueAt(row, 2).toString());
                    double price = Double.parseDouble(jTable1.getValueAt(row, 3).toString());

                    // Cek stok dari database
                    try (Connection K = Koneksi.Go()) {
                        String stockQuery = "SELECT product_stock FROM products WHERE id = ?";
                        PreparedStatement ps = K.prepareStatement(stockQuery);
                        ps.setInt(1, Integer.parseInt(jTable1.getValueAt(row, 0).toString()));
                        ResultSet rs = ps.executeQuery();

                        if (rs.next()) {
                            int availableStock = rs.getInt("product_stock");

                            if (qty > 0 && qty <= availableStock) {
                                jTable1.setValueAt(qty * price, row, 4); // Update total harga
                                updateTotalHarga();
                            } else if (qty > availableStock) {
                                JOptionPane.showMessageDialog(null, "Stok tidak mencukupi!");
                                jTable1.setValueAt(1, row, 2); // Reset ke nilai default
                            }
                        }
                    }

                } catch (NumberFormatException | SQLException ex) {
                    JOptionPane.showMessageDialog(null, "Kuantitas tidak valid atau kesalahan database!");
                    jTable1.setValueAt(1, row, 2); // Reset ke nilai default
                }
            }
        });
    }//GEN-LAST:event_txtProdukActionPerformed

    private void tombolCheckoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tombolCheckoutActionPerformed
        checkout();
    }//GEN-LAST:event_tombolCheckoutActionPerformed

    private void txtUangBayarKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtUangBayarKeyReleased
        endsKetikUangPembayaran();
    }//GEN-LAST:event_txtUangBayarKeyReleased

    private void txtProdukKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtProdukKeyReleased
                String val = txtProduk.getText();
        try {
            if (!val.isEmpty()) {
                // Validasi input
                int bayar = Integer.parseInt(val);

                // Mendapatkan nilai total harga
                String TH = jLabel5.getText();
                String[] arrTH = TH.split(" ");

                if (arrTH.length > 1) { // Pastikan format teks benar
                    int totalH = Integer.parseInt(arrTH[1]);

                    // Cek apakah pembayaran mencukupi
                    if (bayar >= totalH) {
                        long sisa = bayar - totalH;
                        lbluangKembali.setText("Rp " + sisa);
                        enableCheckoutBtn(true);
                    } else {
                        lbluangKembali.setText("Rp 0");
                        enableCheckoutBtn(false);
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Format total harga tidak valid!", "Kesalahan", JOptionPane.ERROR_MESSAGE);
                    lbluangKembali.setText("Rp 0");
                    enableCheckoutBtn(false);
                }
            } else {
                lbluangKembali.setText("Rp 0");
                enableCheckoutBtn(false);
            }
        } catch (NumberFormatException e) {
            lbluangKembali.setText("Rp 0");
            enableCheckoutBtn(false);
        }
    }//GEN-LAST:event_txtProdukKeyReleased

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        this.setVisible(false); 
        LaporanKeuangan tp = new LaporanKeuangan(this.up);
        tp.setVisible(true); 
        tp.setExtendedState(JFrame.MAXIMIZED_BOTH);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        this.setVisible(false); 
        RiwayatTransaksi tp = new RiwayatTransaksi(this.up);
        tp.setVisible(true); 
        tp.setExtendedState(JFrame.MAXIMIZED_BOTH);
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        int response = JOptionPane.showConfirmDialog(this, "Apakah Anda yakin ingin logout?", "Konfirmasi Logout", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);

        if (response == JOptionPane.YES_OPTION) {
            this.setVisible(false);
            Login loginPage = new Login();
            loginPage.setVisible(true);
            loginPage.setExtendedState(Frame.MAXIMIZED_BOTH);
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PageKasir.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PageKasir.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PageKasir.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PageKasir.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PageKasir().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JLabel lblTotalHarga;
    private javax.swing.JLabel lbluangKembali;
    private javax.swing.JButton tombolCheckout;
    private javax.swing.JTextField txtProduk;
    private javax.swing.JTextField txtUangBayar;
    // End of variables declaration//GEN-END:variables
public void setLabelFullname(String fullname) {
        jLabel1.setText(fullname);
    }

    public void setLabelLevel(String level) {
        jLabel6.setText(level);
    }

    public void updateUser(UserProfile Up) {
        this.up = Up;
        jLabel1.setText(up.getFullname());
        jLabel6.setText(up.getLevel());
    }

    private void updateTotalHarga() {
        try {
            double totalHarga = 0;
            int rowcount = jTable1.getRowCount();
            for (int i = 0; i < rowcount; i++) {
                double QTY = Double.parseDouble(jTable1.getValueAt(i, 2).toString());
                double PRC = Double.parseDouble(jTable1.getValueAt(i, 3).toString());
                totalHarga += (QTY * PRC);
            }
            lblTotalHarga.setText("Rp " + (long) totalHarga);
        } catch (NumberFormatException e) {
        }
    }

    private void delFromCart() {
        int idx = jTable1.getSelectedRow();
        if (idx != -1) {
            DefaultTableModel m = (DefaultTableModel) jTable1.getModel();
            m.removeRow(idx);
            updateTotalHarga();
        } else {
            JOptionPane.showMessageDialog(this, "Anda belum memilihi data");
        }
    }

    private void endsKetikUangPembayaran() {
        int r = jTable1.getRowCount();
        if (r > 0) {
            String lbl = lblTotalHarga.getText(); //Rp 12000
            String[] arrayHarga = lbl.split(" ");
            long harga = Long.parseLong(arrayHarga[1]);

            String bayar = txtUangBayar.getText();
            if (!bayar.isEmpty()) {
                long uangbayar = Long.parseLong(bayar);
                long uangkembali = uangbayar - harga;
                lbluangKembali.setText("Rp " + uangkembali);

                if (uangbayar >= harga) {
                    tombolCheckout.setEnabled(true);
                } else {
                    tombolCheckout.setEnabled(false);
                }
            } else {
                lbluangKembali.setText("Rp " + 0);
                tombolCheckout.setEnabled(false);
            }
        }
    }

    private void enableCheckoutBtn(boolean b) {
        tombolCheckout.setEnabled(b);
    }

    private void checkout() {
        Connection K = null;
        PreparedStatement insertTransaksi = null;
        PreparedStatement insertDetailTransaksi = null;
        PreparedStatement updateStok = null;
        String uangKembali = lbluangKembali.getText(); // Uang kembalian dari GUI
        String uangPembayaran = txtUangBayar.getText();  // Uang pembayaran dari GUI

        try {
            // Mulai koneksi dan nonaktifkan auto-commit
            K = Koneksi.Go();
            K.setAutoCommit(false);

            // Ambil tanggal transaksi
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
            String tanggalTransaksi = sdf.format(new Date());

            // Data kasir
            int idKasir = up.getId();

            // Hitung total harga dari keranjang
            DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
            double totalTransaksi = 0;
            for (int i = 0; i < model.getRowCount(); i++) {
                int qty = Integer.parseInt(model.getValueAt(i, 2).toString());
                double harga = Double.parseDouble(model.getValueAt(i, 3).toString());
                totalTransaksi += qty * harga;
            }

            // Masukkan data ke tabel transaksi
            String insertTransaksiQuery = "INSERT INTO transaksi (id_akun, tanggal_transaksi, total_harga) VALUES (?, ?, ?)";
            insertTransaksi = K.prepareStatement(insertTransaksiQuery, Statement.RETURN_GENERATED_KEYS);
            insertTransaksi.setInt(1, idKasir);
            insertTransaksi.setString(2, tanggalTransaksi);
            insertTransaksi.setDouble(3, totalTransaksi);
            insertTransaksi.executeUpdate();

            // Ambil ID transaksi yang baru saja dibuat
            ResultSet rs = insertTransaksi.getGeneratedKeys();
            int idTransaksi = rs.next() ? rs.getInt(1) : 0;

            if (idTransaksi == 0) {
                throw new SQLException("Gagal mendapatkan ID transaksi.");
            }

            // Masukkan data ke tabel detail_transaksi dan update stok
            String insertDetailQuery = "INSERT INTO transaksi_detail (id_transaksi, id_produk, id_kasir, jumlah_produk, harga_satuan, total_harga_produk, tanggal_transaksi) VALUES (?, ?, ?, ?, ?, ?, ?)";
            String updateStokQuery = "UPDATE products SET product_stock = product_stock - ? WHERE id = ?";
            insertDetailTransaksi = K.prepareStatement(insertDetailQuery);
            updateStok = K.prepareStatement(updateStokQuery);

            for (int i = 0; i < model.getRowCount(); i++) {
                int idProduk = Integer.parseInt(model.getValueAt(i, 0).toString());
                int qty = Integer.parseInt(model.getValueAt(i, 2).toString());
                double harga = Double.parseDouble(model.getValueAt(i, 3).toString());
                double totalHargaDetail = qty * harga;

                // Masukkan detail transaksi
                insertDetailTransaksi.setInt(1, idTransaksi);
                insertDetailTransaksi.setInt(2, idProduk);
                insertDetailTransaksi.setInt(3, idKasir);
                insertDetailTransaksi.setInt(4, qty);
                insertDetailTransaksi.setDouble(5, harga);
                insertDetailTransaksi.setDouble(6, totalHargaDetail);
                insertDetailTransaksi.setString(7, tanggalTransaksi);
                insertDetailTransaksi.executeUpdate();

                // Update stok produk
                updateStok.setInt(1, qty);
                updateStok.setInt(2, idProduk);
                updateStok.executeUpdate();
            }

            // Commit transaksi
            K.commit();

            // Tampilkan nota
            Nota nt = new Nota(this, true);
            nt.setData(up.getFullname(), tanggalTransaksi, idTransaksi, totalTransaksi, model, uangKembali, uangPembayaran);
            nt.setVisible(true);

            // Reset tabel keranjang
            model.setRowCount(0);
        } catch (SQLException e) {
            try {
                if (K != null) {
                    K.rollback();
                }
                JOptionPane.showMessageDialog(this, "Transaksi gagal: " + e.getMessage());
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this, "Rollback gagal: " + ex.getMessage());
            }
        } finally {
            try {
                if (insertTransaksi != null) {
                    insertTransaksi.close();
                }
                if (insertDetailTransaksi != null) {
                    insertDetailTransaksi.close();
                }
                if (updateStok != null) {
                    updateStok.close();
                }
                if (K != null) {
                    K.setAutoCommit(true);
                    K.close();
                }
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(this, "Gagal menutup koneksi: " + e.getMessage());
            }
        }
    }
}
